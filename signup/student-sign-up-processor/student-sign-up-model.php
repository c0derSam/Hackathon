<?php

/**Author : Oladele John

** Â© 2022 Oladele John

** Edtech classroom

** File name : signup/student-signup-processing/student-sign-up-model.php

** About : this model signs up the student user

*/

/**PSUEDO ALGORITHM
 * *
 * initiate the student sign up class
 * fetch all the students data in the sign up form
 * check if the data are submitted
 * sanitize the data
 * define other auto generated data
 * create the neccessary user database
 * process the student avatar
 * insert the data into the student database
 * perform some administrative functions
 * redirect the student to the success page
 * 
 */

//initiate the student sign up class
class studentSignUp{

    public $email;

    public $name;

    public $gender;

    public $level;

    public $matric_number;

    public $about;

    public $username;

    public $password;


    public $sanitized_email;

    public $sanitized_name;

    public $sanitized_gender;

    public $sanitized_level;

    public $sanitized_matric_number;

    public $sanitized_about;

    public $sanitized_username;

    public $sanitized_password;



    public $encrypted_password;

    public $encrypted_user_id;

    public $date_created;

    public $time_created;

    public $login_status;

    public $profile_status;

    public $type;

    public $avatar_file_name;



    public $signup_status;


    //fetch all the students data in the sign up form
    public function fetchStudentData(){
 
        $this->email = $_POST['email'];
        $this->name = $_POST['name'];
        $this->gender = $_POST['gender'];
        $this->level = $_POST['level'];
        $this->matric_number = $_POST['matricNumber'];
        $this->about = $_POST['about'];
        $this->username = $_POST['username'];
        $this->password = $_POST['password'];   

        //echo $this->about."<br/>";

    }

    //sanitize the data
    public function sanitize($connection,$data){

        $data = htmlspecialchars($data);
        $data = stripslashes($data);
        $data = strip_tags($data);
        $data = $connection->real_escape_string($data);

        return $data; 

    }

    //define other auto generated data
    public function autoGeneratedData(){

        $this->encrypted_password = md5($this->sanitized_password);

        //encrypted user id
        $random_number = rand();
        $this->encrypted_user_id = md5($random_number);

        date_default_timezone_set("Africa/Lagos");
        $this->date_created = date("Y/m/d");
        $this->time_created = date("h:i:sa");

        $this->login_status = "Not set";
        $this->profile_status = "live";

        $this->type = "student";

    }

    //create the neccessary user database
    public function studentCourseEnrollDbTable(){

        //require the env library
        require('../../vendorEnv/autoload.php');

        $user_db_conn_env = Dotenv\Dotenv::createImmutable(__DIR__, '../../env/db-conn-var.env');
        $user_db_conn_env->load();

        // user db connection
        include('../../resources/database/students-courses-db-connection.php');

        $student_course_table_query = "CREATE TABLE enrolled_courses_of_student_".$this->encrypted_user_id."
        (
        id int NOT NULL AUTO_INCREMENT,
        course_code text,
        course_title text,
        course_about text,
        course_search_id text,
        course_enncrypted_id text,
        level text,
        lecturer_in_charge text,
        lecturer_encrypted_id text,
        date_enrolled text,
        time_enrolled text,
        PRIMARY KEY(id)
        )";

        if($conn2->query($student_course_table_query)){

            //echo "Student course table created";

        }else{

            //echo "Could not create the student course table";

        }

        mysqli_close($conn2);

    }

    public function studentResetPassword(){

        //reset password  db connection
        include('../../resources/database/users-reset-password-db-connection.php');

        $code = rand() * 1000000;

        //insert into the database
        $insert_into_reset_password_table = "INSERT INTO password_reset_codes
        (
            reset_code,encrypted_user_id,user_type
        )
        VALUES(
            '$code','$this->encrypted_user_id','$this->type'
        )
        ";

        $conn18->query($insert_into_reset_password_table);

        mysqli_close($conn18);

    }

    public function studentNotification(){

        //require the env library
        require('../../vendorEnv/autoload.php');

        $user_db_conn_env = Dotenv\Dotenv::createImmutable(__DIR__, '../../env/db-conn-var.env');
        $user_db_conn_env->load();

        // user db connection
        include('../../resources/database/users-notification-db-connection.php');

        $user_noitification_table = "CREATE TABLE notification_for_user".$this->encrypted_user_id."
        (
            id int NOT NULL AUTO_INCREMENT,
            link text,
            message text,
            date text,
            time text,
            status text,
            PRIMARY KEY(id)
        )";

        if($conn15->query($user_noitification_table)){

        }else{


        }

    }

    //process the student avatar
    public function processingStudentAvatar(){

        switch($_FILES['avatar']['type']){
                case 'image/jpg': $ext = 'jpg'; break;
                case 'image/jpeg': $ext = 'jpeg'; break;        
                case 'image/gif': $ext = 'gif'; break; 
                case 'image/png': $ext = 'png'; break; 
                case 'image/tiff': $ext = 'tif'; break; 
                default: $ext = ''; break; 
        }

        if ($ext){

            $random_number = rand();

            $this->avatar_file_name = "$random_number.$ext"; 
  
            //image directory
            $target = "../../resources/avatars/".basename($this->avatar_file_name);
    
            //moving uploaded image to directory
            if(move_uploaded_file($_FILES['avatar']['tmp_name'],$target)){

                //echo "Student avatar uploaded";
                            
            }else{

                //echo "could not upload student avatar";          

            }
  
  
        }else{
         
                       //echo "Not an iamge";

        }


    }


    //insert the data into the student database
    public function insertStudentIntoDb(){

        //require the env library
        require('../../vendorEnv/autoload.php'); 

        $user_db_conn_env = Dotenv\Dotenv::createImmutable(__DIR__, '../../env/db-conn-var.env');
        $user_db_conn_env->load();

        // user db connection
        include('../../resources/database/users-db-connection.php');
        
        $insert_into_student_db_query = "INSERT INTO students (email,fullname,about,gender,level,matric_number,
        username,password,avatar,encrypted_id,date_created,time_created,login_status,profile_status,type) 
        VALUES('$this->sanitized_email','$this->sanitized_name','$this->sanitized_about','$this->sanitized_gender',
        '$this->sanitized_level','$this->sanitized_matric_number','$this->sanitized_username',
        '$this->encrypted_password','$this->avatar_file_name','$this->encrypted_user_id','$this->date_created',
        '$this->time_created','$this->login_status','$this->profile_status','$this->type')";

        if($conn1->query($insert_into_student_db_query)){

            //echo "Inserted the student data into the database";

            $this->signup_status = TRUE;

        }else{

            //echo "Could not insert the student into the database";
            //echo $conn1->error;

            $this->signup_status = FALSE;

        }

    }

    //perform some administrative functions
    /*public function administrativeQueries(){
 
    }*/


}
?>